// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpcserver.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ApplyRequest struct {
	Applicant            string   `protobuf:"bytes,1,opt,name=applicant,proto3" json:"applicant,omitempty"`
	Usercode             string   `protobuf:"bytes,2,opt,name=usercode,proto3" json:"usercode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyRequest) Reset()         { *m = ApplyRequest{} }
func (m *ApplyRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyRequest) ProtoMessage()    {}
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ada33e78da198a, []int{0}
}

func (m *ApplyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyRequest.Unmarshal(m, b)
}
func (m *ApplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyRequest.Marshal(b, m, deterministic)
}
func (m *ApplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyRequest.Merge(m, src)
}
func (m *ApplyRequest) XXX_Size() int {
	return xxx_messageInfo_ApplyRequest.Size(m)
}
func (m *ApplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyRequest proto.InternalMessageInfo

func (m *ApplyRequest) GetApplicant() string {
	if m != nil {
		return m.Applicant
	}
	return ""
}

func (m *ApplyRequest) GetUsercode() string {
	if m != nil {
		return m.Usercode
	}
	return ""
}

type NormalReply struct {
	Error                int32    `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Key                  string   `protobuf:"bytes,100,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NormalReply) Reset()         { *m = NormalReply{} }
func (m *NormalReply) String() string { return proto.CompactTextString(m) }
func (*NormalReply) ProtoMessage()    {}
func (*NormalReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_83ada33e78da198a, []int{1}
}

func (m *NormalReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NormalReply.Unmarshal(m, b)
}
func (m *NormalReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NormalReply.Marshal(b, m, deterministic)
}
func (m *NormalReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalReply.Merge(m, src)
}
func (m *NormalReply) XXX_Size() int {
	return xxx_messageInfo_NormalReply.Size(m)
}
func (m *NormalReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalReply.DiscardUnknown(m)
}

var xxx_messageInfo_NormalReply proto.InternalMessageInfo

func (m *NormalReply) GetError() int32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *NormalReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *NormalReply) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ApplyRequest)(nil), "protobuf.ApplyRequest")
	proto.RegisterType((*NormalReply)(nil), "protobuf.NormalReply")
}

func init() { proto.RegisterFile("rpcserver.proto", fileDescriptor_83ada33e78da198a) }

var fileDescriptor_83ada33e78da198a = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0x5d, 0xcb, 0x96, 0x76, 0x14, 0x94, 0xa0, 0x65, 0x29, 0x1e, 0x24, 0x27, 0x4f, 0x39,
	0xe8, 0xc5, 0x9b, 0x58, 0x0f, 0x7a, 0x92, 0x12, 0x7f, 0xc1, 0x6e, 0x76, 0x5c, 0x42, 0x93, 0x4d,
	0x9c, 0x24, 0x42, 0xfe, 0xbd, 0x34, 0x55, 0xbb, 0xa7, 0x99, 0xf7, 0x0d, 0x6f, 0xe6, 0x31, 0x70,
	0x41, 0x5e, 0x05, 0xa4, 0x6f, 0x24, 0xe1, 0xc9, 0x45, 0xc7, 0x16, 0xa5, 0x74, 0xe9, 0x93, 0xbf,
	0xc1, 0xf9, 0xb3, 0xf7, 0x26, 0x4b, 0xfc, 0x4a, 0x18, 0x22, 0xbb, 0x81, 0x65, 0xeb, 0xbd, 0xd1,
	0xaa, 0x1d, 0x63, 0x53, 0xdd, 0x56, 0x77, 0x4b, 0x79, 0x04, 0x6c, 0x0d, 0x8b, 0x14, 0x90, 0x94,
	0xeb, 0xb1, 0x39, 0x2d, 0xc3, 0x7f, 0xcd, 0x5f, 0xe1, 0xec, 0xdd, 0x91, 0x6d, 0x8d, 0x44, 0x6f,
	0x32, 0xbb, 0x82, 0x1a, 0x89, 0x1c, 0x95, 0x25, 0xb5, 0x3c, 0x08, 0x76, 0x09, 0x33, 0x1b, 0x86,
	0x5f, 0xef, 0xbe, 0xdd, 0x93, 0x1d, 0xe6, 0xa6, 0x3f, 0x90, 0x1d, 0xe6, 0xfb, 0x27, 0x98, 0xc9,
	0xed, 0x0b, 0x7b, 0x84, 0xba, 0x24, 0x63, 0x2b, 0xf1, 0x97, 0x56, 0x4c, 0xa3, 0xae, 0xaf, 0x8f,
	0x7c, 0x72, 0x98, 0x9f, 0x6c, 0x38, 0xac, 0x1c, 0x0d, 0xa2, 0x4b, 0xda, 0xf4, 0x7a, 0x1c, 0x84,
	0x72, 0xd6, 0xa6, 0x51, 0xc7, 0xbc, 0x99, 0x7f, 0x94, 0x2f, 0x6c, 0xab, 0x6e, 0x5e, 0xbc, 0x0f,
	0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x80, 0xbe, 0xb2, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*NormalReply, error)
}

type rPCClient struct {
	cc *grpc.ClientConn
}

func NewRPCClient(cc *grpc.ClientConn) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*NormalReply, error) {
	out := new(NormalReply)
	err := c.cc.Invoke(ctx, "/protobuf.RPC/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
type RPCServer interface {
	Apply(context.Context, *ApplyRequest) (*NormalReply, error)
}

func RegisterRPCServer(s *grpc.Server, srv RPCServer) {
	s.RegisterService(&_RPC_serviceDesc, srv)
}

func _RPC_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.RPC/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _RPC_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcserver.proto",
}
